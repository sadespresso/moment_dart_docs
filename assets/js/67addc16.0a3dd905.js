"use strict";(self.webpackChunkmoment_dart_docs=self.webpackChunkmoment_dart_docs||[]).push([[6923],{2392:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var s=t(758);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},8519:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"extension/set-clamped","title":"Set clamped","description":"Available since 4.1.0","source":"@site/versioned_docs/version-4.1.0/extension/set_clamped.md","sourceDirName":"extension","slug":"/extension/set-clamped","permalink":"/4.1.0/extension/set-clamped","draft":false,"unlisted":false,"editUrl":"https://github.com/sadespresso/moment_dart_docs/tree/main/versioned_docs/version-4.1.0/extension/set_clamped.md","tags":[],"version":"4.1.0","frontMatter":{"id":"set-clamped"},"sidebar":"docs","previous":{"title":"Relative finders","permalink":"/4.1.0/extension/relativeFinders"}}');var i=t(6070),a=t(2392);const l={id:"set-clamped"},d="Set clamped",o={},r=[{value:"Example",id:"example",level:2},{value:"Available extensions",id:"available-extensions",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"set-clamped",children:"Set clamped"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Available since 4.1.0"})}),"\n",(0,i.jsx)(n.p,{children:"Clamped setters set the unit of DateTime objects without overflowing, and\nchanging the next bigger unit."}),"\n",(0,i.jsxs)(n.p,{children:["These helpers use ",(0,i.jsx)(n.a,{href:"https://api.flutter.dev/flutter/dart-core/DateTimeCopyWith/copyWith.html",children:(0,i.jsx)(n.code,{children:"DateTime.copyWith"})}),"\nunder the hood."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"setClampedMonth"})," also clamps the day for the new month. This is the only\nfunction that does it. e.g., ",(0,i.jsx)(n.code,{children:"DateTime(2003, 1, 31).setClampedMonth(DateTime.february)"}),"\n-> ",(0,i.jsx)(n.code,{children:"DateTime(2003, 2, 28)"})]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Setting clamped day"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"/// Setting `day` greater than the month allows results in it overflowing to the next month.\nfinal e1 = DateTime(2024, 2, 1).copyWith(day: 30); // Results in DateTime(2024, 3, 1)\n\n/// Clamped methods prevent Dart's DateTime object's behaviour by recreating the object with clamped\n/// values\nfinal e1m = DateTime(2024, 2, 1).setClampedDay(30); // Results in DateTime(2024, 2, 29)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Setting clamped month (this also clamps the day if necessary)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final e2 = DateTime(2003, 6, 30).setClampedMonth(DateTime.february); // Results in DateTime(2003, 2, 28)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"available-extensions",children:"Available extensions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"setClampedSecond"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"setClampedMinute"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"setClampedHour"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"setClampedDay"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"setClampedMonth"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);